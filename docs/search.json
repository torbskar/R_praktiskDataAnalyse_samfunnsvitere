[
  {
    "objectID": "grafikk.html#lagvis-grafikk",
    "href": "grafikk.html#lagvis-grafikk",
    "title": "1  Grafikk med ggplot",
    "section": "1.1 Lagvis grafikk",
    "text": "1.1 Lagvis grafikk\nSystemet er bygd opp lagvis. Det gjelder selve koden, men også hvordan det ser ut visuelt. Man kan utvide plottet med flere lag i samme plot og det legges da oppå hverandre i den rekkefølgen som angis i koden.\nFor enkle plot som vi skal bruke her angir man i denne rekkefølgen og med en + mellom hver del (vanligvis per linje, men linjeskift spiller ingen rolle). Hver del av koden spesifiserer enten hva som skal plottes eller hvordan det plottes, mens andre deler kan kontrollere utseende på akser, fargeskalaer, støttelinjer eller andre ting som har med layout å gjøre.\n\nAngi data og hva som skal plottes med ggplot()\nAngi hvordan det skal plottes med geom_*()\nAngi andre spesifikasjoner (farger, titler, koordinatsystemer osv)\n\nDette blir tydeligere i eksemplene og forklares underveis.\n\nDet første argumentet i ggplot er data. Altså: hvilket datasett informasjonen hentes fra.\nInni ggplot() må det spesifiseres aes(), “aestethics”, som er hvilke variable som skal plottes. Først og fremst hva som skal på x-akse og y-akse (og evt. z-akse), men også spesifikasjon av om linjer (farge, linjetype) og fyllfarger, skal angis etter en annen variabel.\ngeom_* står for geometric og sier noe om hvordan data skal se ut. Det kan være punkter, histogram, stolper, linjer osv.\ncoord_* definerer koordinatsystemet. Stort sett blir dette bestemt av variablene. Men du kan også snu grafen eller definere sirkulært koordinatsystem, eller andre enklere ting.\nfacet_* definerer hvordan du vil dele opp grafikken i undergrupper"
  },
  {
    "objectID": "grafikk.html#grafikk-for-kategoriske-data",
    "href": "grafikk.html#grafikk-for-kategoriske-data",
    "title": "1  Grafikk med ggplot",
    "section": "1.2 Grafikk for kategoriske data",
    "text": "1.2 Grafikk for kategoriske data\n\n1.2.1 Stolpediagram\n\nlibrary(ggforce)\nggplot(abu89, aes(x = klasse89)) +\n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\nNoen ganger ønsker man å vise fordelingen for to ulike grupper, la oss si for kjønn. En mulighet er da å rett og slett lage to stolpediagram ved siden av hverandre. Til dette kan man spesifisere at dataene er gruppert etter variabelen female og at fyllfargen skal settes etter denne variablen med fill = factor(female). Merk bruken av factor(female) fordi variabelen er numerisk og det vil da ellers brukes en kontinuerlig fargeskale, mens å gjøre om variabelen til kategorisk brukes en annen fargeskala.\nI tillegg gjør vi her to ting til: setter et annet grafisk tema med theme_minimal() og snur plotvinduet slik at kategoriene er litt lettere å lese. Dette er smak og behag.\n\nggplot(abu89, aes(x = klasse89, group = female, fill = factor(female))) +\n  geom_bar(position=\"dodge\") +\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 90))+\n  coord_flip()\n\n\n\n\nEt alternativ er å plassere grafikken for menn og kvinner ved siden av hverandre. Å legge til facet_wrap() gjør dette.\n\nggplot(abu89, aes(x = klasse89)) +\n  geom_bar() +\n  facet_wrap(~factor(female)) +\n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\nEt automatisk forvalg for geom_bar() er hvordan gruppene plasseres som er position=\"stack\". Det betyr at gruppene stables oppå hverandre. Dette er godt egnet hvis poenget er å vise hvor mange av hvert kjønn som er i hver gruppe. Det er mindre egnet hvis du ønsker å sammenligne menn og kvinner. Da er alternativet å velge position=\"dodge\" som følger:\n\n\n1.2.2 Kakediagram\nGenerelt er ikke kakediagram å anbefale da korrekt tolkning involverer å tolke et areal som inneholder vinkel. Det er intuitivt vanskelig å se hvor store hvert kakestykke er med det blotte øyet - med mindre man skriver tallene på,da. Men da kunne man jo også bare laget en tabell?\nMed få kategorier som er rimelig forskjellig kan det gi et ok inntrykk, men ofte ender man opp med å måtte skrive på tallene likevel. Vi tar det med her egentlig bare fordi mange insisterer på å bruke det. Så vet du at det er mulig.\nDet enkleste er å bruke funksjonen pie() som gir følgende resultat.\n\ntab &lt;- table(abu89$klasse89) \ntab\n\n\n    I Øvre serviceklasse   II Nedre serviceklasse   III Rutinefunksjonærer \n                     328                     1181                     1248 \n V-VI Faglærte arbeidere VIIa Ufaglærte arbeidere \n                     648                      637 \n\npie(tab)\n\n\n\n\nMen hvis man skal bruke ggplot er det litt mer jobb. Fordelen med ggplot er at du har bedre kontroll for å lage publiserbar kvalitet. (Akkurat for kakediagram er det kanskje ikke så farlige, for du bør ikke bruke det i publikasjoner hvis du kan la være).\n\npc &lt;- abu89 %&gt;% \n  group_by(klasse89) %&gt;% \n  summarise(n = n()) %&gt;% \n  mutate(pct = n/sum(n)*100) %&gt;% \n  ungroup()\n\n\nggplot(pc, aes(x = \"\", y = pct, fill = (klasse89))) +\n  geom_bar(stat=\"identity\", width=1) +\n  coord_polar(\"y\", start=0) +\n  theme_void()+\n  geom_text( aes(label = paste0( round(pct,1), \"%\"), x = 1.4), \n            position = position_stack(vjust=.5), check_overlap = F) +\n  labs(x = NULL, y = NULL, fill = NULL)+\n  theme(axis.line = element_blank(),\n          axis.text = element_blank(),\n          axis.ticks = element_blank()) +\n  scale_fill_brewer(palette=\"Blues\", direction = -1)"
  },
  {
    "objectID": "grafikk.html#grafikk-for-kontinuerlige-data",
    "href": "grafikk.html#grafikk-for-kontinuerlige-data",
    "title": "1  Grafikk med ggplot",
    "section": "1.3 Grafikk for kontinuerlige data",
    "text": "1.3 Grafikk for kontinuerlige data\n\n1.3.1 Histogram\n\nggplot(abu89, aes(x = time89)) +\n  geom_histogram()\n\n\n\n\nDet er også vanlig å fremstille det samme på en “tetthetsskala”, der arealet summeres til 1. Det betyr at arealet for hvert intervall tilsvarer en andel. Visuelt sett er det vel så mye arealet vi oppfatter som høyden på stolpene. Men det er bare skalaen på y-aksen som har endret seg. Visuelt sett, ser histogrammene helt like ut.\n\nggplot(abu89, aes(x = time89, y = ..density..)) +\n  geom_histogram()\n\n\n\n\n\n\n1.3.2 Density plot\nDensity plot er en måte å fremstille det samme på, men i stedet for å dele inn i intervaller som i histogram lager vi en glattet kurve. Det blir på skalaen “tetthet” som i histogrammet ovenfor.\n\nggplot(abu89, aes(x = time89)) +\n  geom_density()\n\n\n\n\n\nggplot(abu89, aes(x = time89)) +\n  geom_histogram(aes(y = ..density..), fill = \"lightgrey\", col = \"grey\") +\n  geom_density(col = \"red\", linewidth = 1) +\n  theme_minimal()\n\n\n\n\nEn fordel med denne fremstillingen er at det er lettere å sammenligne grupper. Her er et eksempel med density plot etter hvor mye man drikker.\n\nggplot(abu89, aes(x = time89, group = klasse89, linetype = klasse89)) +\n  geom_density(linewidth = 1)+\n  guides(fill = guide_legend(override.aes = list(shape = 1 ) ) ) +\n  theme_minimal()\n\n\n\n\n\nggplot(abu89, aes(x = time89)) +\n  geom_density(linewidth = 1)+\n  theme_minimal()+\n  facet_wrap(~klasse89, scales=\"free\")\n\n\n\n\n\nggplot(abu89, aes(x = time89, group = female,  fill = factor(female))) +\n  geom_density(alpha = .3)+\n  guides(fill=guide_legend(title=\"Kjønn\"))+\n  theme_minimal()\n\n\n\n\n\n\n1.3.3 Flere variable samtidig\n\n1.3.3.1 Boksplot\n\nggplot(abu89, aes(y = time89, group = klasse89)) +\n  geom_boxplot()+\n  theme_minimal()\n\n\n\n\n\n\n1.3.3.2 Scatterplot\n\nggplot(abu89, aes(x = age, y = time89)) +\n  geom_point(alpha=.3)+\n  theme_minimal()\n\n\n\n\n\nggplot(abu89, aes(x = age, y = time89)) +\n  geom_jitter(alpha=.1, width = .3)+\n  theme_minimal()\n\n\n\n\n\n\n1.3.3.3 Ridgeplot\nRidgeplot er en annen måte å sammenligne en kontinuerlig fordeling betinget på en gruppering.\n\nlibrary(ggridges)\nggplot( abu89,  aes(y = klasse89, x = time89)) +\n  geom_density_ridges()"
  },
  {
    "objectID": "grafikk.html#oppgaver",
    "href": "grafikk.html#oppgaver",
    "title": "1  Grafikk med ggplot",
    "section": "1.4 Oppgaver",
    "text": "1.4 Oppgaver\nSlå opp i boken R for data science hvis du står fast eller ikke skjønner hva koden betyr.\n\nExercise 1.1 Last ned datasettet abu89 fra angitt hjemmeside og les inn dataene til R som vist ovenfor. Lag den samme grafikken som vist her, gjør noen endringer på kodene for å endre utseendet på plottene. Det er et mål at du skal forstå hva hver enkelt kommando gjør.\n\n\nExercise 1.2 Last inn datasettet NorLAG i R. Velg noen variable som du selv tenker kan være informative å se nærmere på. Bruk de samme teknikkene på disse variablene."
  }
]