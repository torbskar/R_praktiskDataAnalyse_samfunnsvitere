# Lese inn datasett

```{r}
#| warning: false
#| message: false
#| error: false
#| echo: false

invisible(Sys.setlocale(locale='no_NB.utf8'))
```

I dette kapittelet skal vi bruke følgende pakker:

```{r}
#| error: false
#| message: false
#| warning: false

library(tidyverse)
library(memisc)

```

## Generelt om ulike dataformat

Data kan være lagret i mange ulike formater, og du vil kunne få data i et format som ikke er tilrettelagt verken i eller for R. Å gjøre om data fra et format til et annet kan være en avgjørende oppgave for å få gjort noe som helst. R kan imidlertid håndtere det aller meste av dataformater på en eller annen måte. Foreløpig skal vi kun se på et dataformat som er spesielt egnet for R, nemlig rds-formatet. Alle datasett som følger med denne boken vil være i rds-formatet, med unntak av kapittelet der temaet er import av andre formater.

## Lese inn datasett og få oversikt

Vi bruker her et lite utvalg variable fra Ungdata 2010-2020 (@ungdata) som er lagret i rds-format. Dette datasettet er tilgjengelig på [NSD sine sider](https://surveybanken.sikt.no/no/study/7ae7f902-ddde-4bd8-8311-21f16ce93fdf/6). Følgende kode bruker funksjonen `readRDS` for å lese inn datasettet. Filbanen er angitt å ligge i en mappe som heter "data" i prosjektmappen, og filnavnet er "ungdata_alko.rds". Når man leser inn dataene legges de i et "objekt" som vi her kaller *ungdata_alko*.

```{r}
ungdata_alko <- readRDS("data/ungdata_alko.rds")
```

En første ting man bør sjekke er om dataene er lest inn riktig og at det rett og slett ser greit ut. Det er lite som kan gå galt når man leser inn en rds-fil, men det kan være en fordel for deg selv å se på dataene og se hvordan de ser ut. Vi kan se på objektet *ungdata_alko* ved å skrive navnet på objektet i konsollen. Da vil R i utgangspunktet skrive *hele* datasettet i konsollen.   

```{r}
ungdata_alko
```

Det er imidlertid sjelden hensiktsmessig å se på hele datasettet på denne måten. Det er for det første ikke plass til å vise hele datasettet i konsollen, og for det andre er det ikke så lett å få oversikt over datasettet på denne måten. Hvis du virkelig vil se på hele datasettet er det bedre å bruke `View`-funksjonen som åpner datasettet i et eget vindu.

```{r}
#| eval: false
View(ungdata_alko)
```

![ ](imgs/View_ungdata_alko.png)

Du kan lukke dette vinduet med dataene uten at det har noe å si for dataene, som fremdeles er tilgjengelig i objektet på samme måte som før.

Det er vanligvis ikke så nyttig å se på datasettet på denne måten heller. Det er derfor vanligvis mer hensiktsmessig å se på en del av datasettet med å bare be om å få se de første observasjonene. Da får du et innblikk i datastrukturen, variable og verdier. Dette gjøres med funksjonen `head`.

```{r}
head(ungdata_alko)
```

Hvis det er mange variable i datasettet vil det ikke bli plass i consoll-vinduet til å vise alle variablene. Da vil R bare vise de første variablene og skrive at det er flere variable som ikke vises. Da kan det være mer hensiktsmessig å bruke funksjonen `glimpse` som viser variabelnavnene i rader, med de tilhørende første verdiene. 

```{r}
glimpse(ungdata_alko)
```
`glimpse` gir også noe ytterligere informasjon, som antall observasjoner i datasettet og og hvilken type variablene er. Når det i output står "dbl" betyr at det er en numerisk variabel, og "fct" betyr at det er en faktorvariabel. 

Det finnes også andre variabeltyper enn det som er i eksempelet, herunder betyr "chr" at det er en tekstvariabel, "int" betyr at det er en heltallsvariabel, "date" betyr at det er en dato-variabel, og "lgl" betyr at det er en logisk variabel (dvs. en variabel som kan ha verdiene TRUE eller FALSE). Vi kommer tilbake til disse variabeltypene etterhvert. 




Funksjonen `class()` gir informasjon om hva slags objekt man har. Her sjekkes objektet *ungdata_alko*:

```{r}
class(ungdata_alko)
```

I dette tilfellet får vi tre beskjeder. Det er en kombinert objekttype av *tibble* og *data.frame*. Mens *data.frame* er standard datasett tilsvarende som et regneark, så er *tibble* en utvidelse med noen ekstra funksjoner som er nyttige for avanserte brukere, men er å regne som en utvidelse av *data.frame*. For vårt formål vil det i praksis være det samme. Et datasett som leses inn i R bør altså være av typen tbl eller data.frame. Data kan også ha andre typer strukturer og da vil `class()` rapportere noe annet.

Når man bruker funksjoner i R, så vil noen ganger resultatet avhenge av hva slags type objekt det er.

For å vite hvor mange rader og kolonner det er i datasettet kan man bruke funksjonen `dim()` slik:

```{r}
dim(ungdata_alko)

```

Her får vi vite at det er `r dim(ungdata_alko)[1]` rader (dvs. observasjoner) og `r dim(ungdata_alko)[2]` kollonner (dvs. variable).



### Undersøke enkeltvariable med `codebook()` fra pakken {memisc}

Noen ganger vil man ha litt mer informasjon om enkeltvariablene. Noen datasett vil komme med labler (omtalt annet sted) eller faktorvariable, som gjør at variablene inneholder både tallverdier og tekst.

Å få ut noe deskriptiv statistikk og se på fordelinger er da gjerne neste steg som vil bli behandlet i de etterfølgende kapitlene.

Pakken {memisc} inneholder en rekke funksjoner for å håndtere surveydata, som vi ikke skal gå nærmere inn på her. Men akkurat funksjonen `codebook()` gir litt mer informativt output.

```{r}
#| message: false 
#| warning: false
library(memisc)
codebook(ungdata_alko$alko1)

```

Grunnen til å bruke `codebook` er å få et raskt innblikk i enkeltvariable, inkludert fordelingen av verdier. Dette er mest informativt for kategoriske variable eller numeriske variable med relativt få verdier.



